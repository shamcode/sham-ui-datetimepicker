<template>
    <thead>
        <tr>
            <th :onclick={{this$.changeMonth.bind( this, -1 )}}>
                <span>{{prevSymbol}}</span>
            </th>
            <th colspan="5" class="picker-switch" :onclick={{changeMode.bind( this, 'months' )}}>
                {{ date | formatDate( 1 + 2 ) | title }}
            </th>
            <th :onclick={{this$.changeMonth.bind( this, 1 )}}>
                <span>{{nextSymbol}}</span>
            </th>
        </tr>
        <tr>
            {% for weekDay of weekDays %}
                <th>{{weekDay}}</th>
            {% endfor %}
        </tr>
    </thead>
    <tbody>
        {% for week of this$.getMonthsDays( value, date, today, classForDate, isDateSelectable ) %}
            <tr>
                {% for day of week %}
                    <td
                        :onclick={{changeValue.bind( this, day.date )}}
                        class={{day.class}}
                    >
                        {{day.date.getDate()}}
                    </td>
                {% endfor %}
            </tr>
        {% endfor %}
    </tbody>
    {% if showTime %}
        <tfoot>
            <tr>
                <th colspan="7" :onclick={{changeMode.bind( this, 'time' )}}>
                    {{ value | formatDate( 16 + 32 + 64 )}}
                </th>
            </tr>
        </tfoot>
    {% endif %}
</template>

<script>
    import { title, classes } from '../utils/string';
    import { change, clone, compare, formatDate } from '../utils/date';

    /**
     * Get days of week names in default locale
     * @return {String[]}
     */
    const daysOfWeek = () => {
        const daysOfWeek = [];
        let date = new Date( 2020, 2, 30 );
        for ( let i = 0; i <= 6; i++ ) {
            daysOfWeek.push(
                title( formatDate( date, 128 ) )
            );
            date = change( date, 'Date', 1 );
        }
        return daysOfWeek;
    };

    function DayOfMonth( options, update ) {
        const date = $();
        const changeDate = $();

        const state = options( {
            [ $.value ]: new Date(),
            [ date ]: new Date(),
            [ $.today ]: new Date(),
            [ $.showTime ]: true,
            [ $.isDateSelectable ]: () => true,
            [ $.classForDate ]: () => '',
            [ changeDate ]: ( value ) => update( {
                [ date ]: value
            } ),
            [ $.prevSymbol ]: String.fromCharCode( 0x25C2 ),
            [ $.nextSymbol ]: String.fromCharCode( 0x25B8 ),
            [ $.weekDays ]: daysOfWeek(),
            [ $.changeValue ]: () => {},
            [ $.changeMode ]: () => {}
        } );

        this.filters.formatDate = formatDate;
        this.filters.title = title;

        this$.getMonthsDays = ( current, date, today, classForDate, isDateSelectable ) => {
            const monthsDays = new Array( 6 );
            const firstDayOfMonth = new Date( date.getFullYear(), date.getMonth(), 1 );
            let firstWeekday = firstDayOfMonth.getDay() - 1;
            if ( firstWeekday < 0 ) {
                firstWeekday = 6;
            }
            let d = change( firstDayOfMonth, 'Date', -firstWeekday );
            for ( let i = 0; i < 6; i++ ) {
                const week = new Array( 6 );
                for ( let day = 0; day < 7; day++ ) {
                    const dom = clone( d );
                    week[ day ] = {
                        date: dom,
                        class: classes( [
                            'day',
                            classForDate( dom ),
                            dom.getMonth() === date.getMonth() ? '' : 'other-month',
                            compare( dom, today, 1 + 2 + 4 ) ? 'today' : '', // cmp by year, month & date
                            compare( dom, current, 1 + 2 + 4 ) ? 'active' : '', // cmp by year, month & date
                            isDateSelectable( dom ) ? '' : 'disabled'
                        ] )
                    };
                    d = change( d, 'Date', 1 );
                }
                monthsDays[ i ] = week;
            }
            return monthsDays;
        };

        this$.changeMonth = delta => state[ changeDate ](
            change( state[ date ], 'Month', delta )
        );
    }
    export default Component( Template, DayOfMonth );
</script>
