<template>
    <thead>
        <tr>
            <th :onclick={{this.changeMonth.bind( this, -1)}}>
                <span>◂</span>
            </th>
            <th colspan="5" class="picker-switch" :onclick={{changeMode.bind( this, 'months')}}>
                {{this.currentMonth( date )}}
            </th>
            <th :onclick={{this.changeMonth.bind( this, 1)}}>
                <span>▸</span>
            </th>
        </tr>
        <tr>
            {% for weekDay of daysOfWeek %}
                <th>{{weekDay}}</th>
            {% endfor %}
        </tr>
    </thead>
    <tbody>
        {% for week of this.getMonthsDays( value, date, classForDate, isDateSelectable ) %}
            <tr>
                {% for day of week %}
                    <td
                        :onclick={{changeValue.bind( this, day.date )}}
                        class={{day.class}}
                    >
                        {{day.date.getDate()}}
                    </td>
                {% endfor %}
            </tr>
        {% endfor %}
    </tbody>
    {% if showTime %}
        <tfoot>
            <tr>
                <th colspan="7" :onclick={{changeMode.bind( this, 'time' )}}>
                    {{this.formatDate( value, 16 + 32 + 64 )}}
                </th>
            </tr>
        </tfoot>
    {% endif %}
</template>

<script>
    import { mergeWithTemplate, options } from 'sham-ui-macro/babel.macro';
    import { title, classes } from '../utils/string';
    import { change, clone, compare, formatDate } from '../utils/date';

    /**
     * Get days of week names in default locale
     * @return {String[]}
     */
    const daysOfWeek = () => {
        const daysOfWeek = [];
        let date = new Date( 2020, 2, 30 );
        for ( let i = 0; i <= 6; i++ ) {
            daysOfWeek.push(
                title( formatDate( date, 128 ) )
            );
            date = change( date, 'Date', 1 );
        }
        return daysOfWeek;
    };

    @mergeWithTemplate
    class DayOfMonth extends Template {
        @options value = new Date();
        @options date = new Date();
        @options today = new Date();
        @options showTime = true;
        @options isDateSelectable = () => true;
        @options classForDate = () => '';
        @options changeDate( date ) {
            this.update( { date } );
        }

        @options daysOfWeek = daysOfWeek(); // Calc once

        formatDate( date, mode ) {
            return formatDate( date, mode );
        }

        currentMonth( date ) {
            return title(
                this.formatDate( date, 1 + 2 )
            );
        }

        getMonthsDays( current, date, classForDate, isDateSelectable ) {
            const monthsDays = new Array( 6 );
            const firstDayOfMonth = new Date( date.getFullYear(), date.getMonth(), 1 );
            let firstWeekday = firstDayOfMonth.getDay() - 1;
            if ( firstWeekday < 0 ) {
                firstWeekday = 6;
            }
            let d = change( firstDayOfMonth, 'Date', -firstWeekday );
            for ( let i = 0; i < 6; i++ ) {
                const week = new Array( 6 );
                for ( let day = 0; day < 7; day++ ) {
                    const dom = clone( d );
                    week[ day ] = {
                        date: dom,
                        class: classes( [
                            'day',
                            classForDate( dom ),
                            dom.getMonth() === date.getMonth() ? '' : 'other-month',
                            compare( dom, this.options.today, 1 + 2 + 4 ) ? 'today' : '', // cmp by year, month & date
                            compare( dom, current, 1 + 2 + 4 ) ? 'active' : '', // cmp by year, month & date
                            isDateSelectable( dom ) ? '' : 'disabled'
                        ] )
                    };
                    d = change( d, 'Date', 1 );
                }
                monthsDays[ i ] = week;
            }
            return monthsDays;
        }

        changeMonth( delta ) {
            this.options.changeDate(
                change( this.options.date, 'Month', delta )
            );
        }
    }

    export default DayOfMonth;
</script>