<template>
    {% import DynamicComponent from 'sham-ui-dynamic-component' %}

    <table class="sham-ui-datetimepicker">
        {% let componentForMode = componentsByMode[ displayMode ] %}

        <DynamicComponent
            component={{componentForMode[ 0 ]}}
            prevSymbol={{prevSymbol}}
            nextSymbol={{nextSymbol}}
            incSymbol={{incSymbol}}
            decSymbol={{decSymbol}}
            date={{date}}
            value={{value}}
            today={{today}}
            showTime={{showTime}}
            isDateSelectable={{isDateSelectable}}
            classForDate={{classForDate}}
            changeDate={{this[ ref( 'changeDate' ) ]}}
            changeValue={{this[ ref( 'changeValue' ) ]}}
            changeMode={{this[ ref( 'changeMode' ) ]}}
            {{...componentForMode[ 1 ]( this )}}
        />
    </table>
</template>

<script>
    import { yearsRangeOptions } from './options/year-range';
    import { yearOptions } from './options/year';
    import { monthOptions } from './options/months';
    import { hoursOptions } from './options/hours';
    import { minutesOptions } from './options/minutes';
    import { secondsOptions } from './options/seconds';
    import ItemsList from './components/item-list.sfc';
    import Time from './components/time.sfc';
    import DayOfMonth from './components/day-of-month.sfc';

    function DateTimePicker( options, update ) {
        const value = ref();
        const onChange = ref();
        const isDateSelectable = ref();
        const classForDate = ref();

        const date = ref();
        const displayMode = ref();

        const state = options( {

            // Logic
            [ value ]: new Date(),
            [ onChange ]: () => {},
            [ ref( 'showTime' ) ]: true,
            [ isDateSelectable ]: () => true,
            [ classForDate ]: () => '',

            // Style
            [ ref( 'prevSymbol' ) ]: String.fromCharCode( 0x25C2 ),
            [ ref( 'nextSymbol' ) ]: String.fromCharCode( 0x25B8 ),
            [ ref( 'incSymbol' ) ]: '+',
            [ ref( 'decSymbol' ) ]: String.fromCharCode( 0x2013 ),

            // Inner
            [ date ]: {
                get() {
                    return new Date( state[ value ].getTime() );
                }
            },
            [ ref( 'today' ) ]: new Date(),
            [ displayMode ]: 'dom',
            [ ref( 'componentsByMode' ) ]: {
                time: [ Time, () => null ],
                dom: [ DayOfMonth, () => null ],
                months: [ ItemsList, monthOptions ],
                year: [ ItemsList, yearOptions ],
                yearRange: [ ItemsList, yearsRangeOptions ],
                hours: [ ItemsList, hoursOptions ],
                minutes: [ ItemsList, minutesOptions ],
                seconds: [ ItemsList, secondsOptions ]
            }
        } );

        this[ ref( 'changeDate' ) ] = value => update( {
            [ date ]: value
        } );

        this[ ref( 'changeValue' ) ] = value => {
            if ( state[ isDateSelectable ]( value ) ) {
                update( {
                    [ date ]: new Date( value.getTime() )
                } );
                state[ onChange ]( value );
            }
        };

        this[ ref( 'changeMode' ) ] = value => update( {
            [ displayMode ]: value
        } );
    }

    export default Component( Template, DateTimePicker );
</script>
